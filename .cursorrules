# Cursor Rules for NOWtask2

## プロジェクト概要
個人利用向けのlocalStorageベースのタスク管理アプリケーション

## 開発方針

### テスト駆動開発（TDD）を厳守
- 必ず「失敗するテスト」から始める（Red）
- テストを通す最小限のコードを書く（Green）
- コードをリファクタリングして改善する（Refactor）
- 新機能追加時は必ずテストファーストで進める

### テスト戦略：Kent C. Dodds の Testing Trophy
- **統合テスト**を最重要視する
- 単体テストは純粋な関数・ビジネスロジックのみ
- E2Eテストは重要なユーザーフローのみ数を絞る
- 静的解析（ESLint, Prettier）を基盤とする

## ファイル構成ルール
- **最大3ファイル**で構成を維持する
  - `index.html` - UI（HTML + CSS）
  - `app.js` - ビジネスロジック + データ永続化
  - `app.test.js` - すべてのテスト

## 設計方針の簡素化
- **レーン計算アルゴリズム**：「左から順番に空いている場所を探す」シンプルな方式
- **パフォーマンス目標**：なし（まずは動くものを作ることを優先）
- **用語**：中学生にもわかりやすい表現を使用

## コーディング規約

### JavaScript
- ES6+ の機能を積極的に使用
- クラスベースの設計を採用
- 関数は純粋関数を心がける
- 適切な命名規則を使用（英語）

### テストコード
- テスト名は日本語で具体的に記述
- AAA（Arrange-Act-Assert）パターンを使用
- `beforeEach`でテスト環境を初期化
- モックは最小限に抑える

### HTML/CSS
- セマンティックなHTML構造
- CSS は index.html 内に記述
- レスポンシブデザインを考慮
- アクセシビリティを意識

## 技術制約
- 外部ライブラリは最小限に抑える
- localStorage のみを使用（サーバーサイドなし）
- モダンブラウザ対応（IE11以下は対象外）

## 開発フロー
1. 要件を理解し、テストケースを日本語で整理
2. 失敗するテストを作成
3. テストを通す最小限のコードを実装
4. リファクタリングで品質向上
5. 次の機能へ

## 実装順序
1. **データ保存部分**：TaskRepositoryクラス（localStorage操作）
2. **レーン計算部分**：シンプルな「左から順番」アルゴリズム
3. **画面操作部分**：UI操作とビジネスロジックの連携
4. **全体の流れ**：重要なユーザーフローのテスト

## 禁止事項
- テストなしでのコード追加
- 複雑な設計パターンの導入
- 不要な抽象化
- ファイル数の増加

## 推奨事項
- 小さなコミット単位
- 意味のあるコミットメッセージ
- コードレビューの実施
- 継続的なリファクタリング

---
レビュアー: t_wada
テスト戦略: Kent C. Dodds の Testing Trophy 